

public class Djkstra {
	
	static private MinPQ<GraphNode> queue;
	
	static int[][] weightsShortestPaths;
	
	static void Main(GraphAdjList graph){
		
		weightsShortestPaths = new int[graph.getV()][graph.getV()];
		
		//for(int i = 0;i<graph.getAdjList().length;i++){
			GraphNode s = graph.getAdjList()[graph.getS()];
			queue = new MinPQ<GraphNode>();
			initialize(s,graph);
			
			while(queue.size()!=0){
				GraphNode u = queue.delMin();
				for(Edge edge:u.edges){
					relax(edge, graph);
				}
			}
			
			
		//}
		
		
	}
	
	/**
	 * This method relaxes edges.
	 * @param edge
	 */
	private static void relax(Edge edge,GraphAdjList graph){
		if(edge.v.d > edge.u.d + edge.w){
			edge.v.d = edge.u.d + edge.w;
			edge.v.parent = edge.u;
			queue.insert(edge.v);
		}
	}
	
	/**
	 * initialize the graph
	 * @param s
	 */
	private static void initialize(GraphNode s,GraphAdjList graph) {
		for(GraphNode node:graph){
			node.d = Integer.MAX_VALUE;
			node.parent= null;
			queue.insert(node);
		}
		s.d = 0;
	}
	
}
